To achieve 100% code coverage for the LPDTriggerMessageSenderUtil class using JUnit 5 and Mockito, we can mock dependencies and verify method calls and interactions. Below is a JUnit 5 test class that covers various parts of LPDTriggerMessageSenderUtil, including exception handling.

package com.abnamro.crms.1pdrisksignaladministration.utility;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.azure.servicebus.ServiceBusException;
import com.microsoft.azure.servicebus.ServiceBusMessage;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class LPDTriggerMessageSenderUtilTest {

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private ServiceBusConfig serviceBusConfig;

    @Mock
    private Logger log;

    @InjectMocks
    private LPDTriggerMessageSenderUtil messageSenderUtil;

    @Value("$(event.writer.queue)")
    private String queueNameRSD;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(messageSenderUtil, "queueNameRSD", queueNameRSD);
    }

    @Test
    public void testConvertAndSendToRsdQueue_Success() throws JsonProcessingException, ServiceBusException {
        // Arrange
        EventDTO eventDTO = new EventDTO();
        String message = "testMessage";

        when(objectMapper.writeValueAsString(eventDTO)).thenReturn(message);
        when(serviceBusConfig.getInstance().getSenderClient()).thenReturn(mock(ServiceBusMessage.class));

        // Act & Assert
        assertDoesNotThrow(() -> messageSenderUtil.convertAndSendToRsdQueue(eventDTO));
        verify(log).info("Sending Message to RSD queue...");
        verify(log).info("Message sent successfully to RSD Queue...");
    }

    @Test
    public void testConvertAndSendToRsdQueue_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        EventDTO eventDTO = new EventDTO();
        when(objectMapper.writeValueAsString(eventDTO)).thenThrow(new JsonProcessingException("error") {});

        // Act
        messageSenderUtil.convertAndSendToRsdQueue(eventDTO);

        // Assert
        verify(log).error(eq("Error occurred while sending the message to rsd queue = {}"),
                          eq(ExceptionUtils.getStackTrace(any(JsonProcessingException.class))));
    }

    @Test
    public void testConvertAndSendToRsdQueue_ServiceBusException() throws JsonProcessingException, ServiceBusException {
        // Arrange
        EventDTO eventDTO = new EventDTO();
        String message = "testMessage";

        when(objectMapper.writeValueAsString(eventDTO)).thenReturn(message);
        doThrow(new ServiceBusException(false)).when(serviceBusConfig.getInstance().getSenderClient()).sendMessage(any(ServiceBusMessage.class));

        // Act
        messageSenderUtil.convertAndSendToRsdQueue(eventDTO);

        // Assert
        verify(log).error(eq("Error occurred while sending the message to rsd queue = {}"),
                          eq(ExceptionUtils.getStackTrace(any(ServiceBusException.class))));
    }
}

Explanation

1. Mocks and Dependency Injection:

The ObjectMapper and ServiceBusConfig are mocked to simulate their behavior without performing real operations.

The Logger is mocked to verify that logging messages are printed as expected.



2. Test Setup:

@BeforeEach method uses ReflectionTestUtils to set the queueNameRSD field.



3. Success Scenario (testConvertAndSendToRsdQueue_Success):

Mocks ObjectMapper to return a sample message string and verifies logging calls.



4. Exception Scenarios:

testConvertAndSendToRsdQueue_JsonProcessingException and testConvertAndSendToRsdQueue_ServiceBusException verify that the appropriate error logs are triggered in case of JsonProcessingException and ServiceBusException, respectively.




This test suite aims for 100% code coverage by covering the main execution flow and exception handling in convertAndSendToRsdQueue.

