package com.abnamro.crms.lpdrisksignaladministration.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.dao.DataAccessException;

import com.abnamro.crms.lpdrisksignaladministration.dao.LPDControlServiceDao;
import com.abnamro.crms.lpdrisksignaladministration.exception.LPDException;
import com.abnamro.crms.lpdrisksignaladministration.model.LPDControl;

@ExtendWith(MockitoExtension.class)
public class LPDControlServiceImplTest {

    @Mock
    private LPDControlServiceDao lpdControlServiceDao;

    @InjectMocks
    private LPDControlServiceImpl lpdControlServiceImpl;

    private LPDControl lpdControl;

    @BeforeEach
    public void setUp() {
        lpdControl = new LPDControl();
    }

    @Test
    public void testLogLPDControlError_Success() throws LPDException {
        String inputString = "inputJson";
        String errorMsg = "errorMessage";
        String facilityIdentifier = "facility123";

        when(lpdControlServiceDao.save(any(LPDControl.class))).thenReturn(lpdControl);

        lpdControlServiceImpl.logLPDControlError(inputString, errorMsg, facilityIdentifier);

        verify(lpdControlServiceDao, times(1)).save(any(LPDControl.class));
    }

    @Test
    public void testLogLPDControlError_DataAccessException() {
        String inputString = "inputJson";
        String errorMsg = "errorMessage";
        String facilityIdentifier = "facility123";

        DataAccessException dataAccessException = new DataAccessException("...") {};
        when(lpdControlServiceDao.save(any(LPDControl.class))).thenThrow(dataAccessException);

        LPDException exception = assertThrows(LPDException.class, () -> {
            lpdControlServiceImpl.logLPDControlError(inputString, errorMsg, facilityIdentifier);
        });

        assertEquals("Error occurred while saving LPDControl", exception.getMessage());
        assertEquals(dataAccessException, exception.getCause());
        verify(lpdControlServiceDao, times(1)).save(any(LPDControl.class));
    }
}
