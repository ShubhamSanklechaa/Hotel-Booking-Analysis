To achieve this, you can create a CreditFacilityTypeDAO class to execute the query and check if the facility is of type NPL. After that, you can use this condition in your LPDMessageForSignalUtil class to proceed only if the facility is NPL.

Here's how you can structure the CreditFacilityTypeDAO class:

CreditFacilityTypeDAO.java

package com.abnamro.crms.1pdrisksignaladministration.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class CreditFacilityTypeDAO {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public boolean isNPLFacility(String facilityId) {
        String query = "SELECT 1 FROM CREDIT_FACILITY WHERE FACILITY_ID = ? AND RISK_MANAGEMENT_TYPE = 'NPL'";
        Integer result = jdbcTemplate.queryForObject(query, new Object[]{facilityId}, Integer.class);
        return result != null && result == 1;
    }
}

Modification in LPDMessageForSignalUtil.java

In your existing class, inject the CreditFacilityTypeDAO and modify the generateJsonForSignalMessage method to add this condition after your initial if statement.

@Autowired
private CreditFacilityTypeDAO creditFacilityTypeDAO;

public void generateJsonForSignalMessage(LPDRiskSignal lpdRiskSignalNew, LPDRiskSignal lpdOldRiskSignal) 
        throws LPDException, JsonProcessingException, InterruptedException {
    
    // Check if the facility is of type NPL
    boolean isNPL = creditFacilityTypeDAO.isNPLFacility(lpdRiskSignalNew.getSubjectId());
    
    if ((lpdOldRiskSignal != null && 
         lpdRiskSignalNew.getDetrorationFlag().equalsIgnoreCase(lpdOldRiskSignal.getDetrorationFlag()))
        || "Y".equalsIgnoreCase(lpdRiskSignalNew.getDetrorationFlag())) {
        
        if (isNPL) {
            CRMSEventPublisherDTO crmsEventPublisherDTO = new CRMSEventPublisherDTO();
            LPDRiskSignalTriggerDetails eventLPDRiskSignalChangesDetails = new LPDRiskSignalTriggerDetails();
            SubjectContext subjectContext = new SubjectContext();
            
            subjectContext.setCreditFacilityAgreementId(lpdRiskSignalNew.getSubjectId());
            crmsEventPublisherDTO.setType(LPDRiskSignalConstants.EVENT_TYPE);
            crmsEventPublisherDTO.setSubmittedDateTime(OffsetDateTime.now().toString());
            crmsEventPublisherDTO.setPublisherId(LPDRiskSignalConstants.EVENT_PUBLISHER_ID);
            
            eventLPDRiskSignalChangesDetails.setSignalId(lpdRiskSignalNew.getSignalIdentifier().toString());
            eventLPDRiskSignalChangesDetails.setOriginalLPD(lpdRiskSignalNew.getOriginalLifetimePD().doubleValue());
            eventLPDRiskSignalChangesDetails.setResidualLPD(lpdRiskSignalNew.getResidualLifetimePD().doubleValue());
            eventLPDRiskSignalChangesDetails.setDeteriorationFlag(lpdRiskSignalNew.getDetrorationFlag());
            eventLPDRiskSignalChangesDetails.setAdministrationStatus(lpdRiskSignalNew.getAdministrationStatus());
            eventLPDRiskSignalChangesDetails.setLpdVersion(lpdRiskSignalNew.getLpdVersion().toString());
            
            crmsEventPublisherDTO.setSubjectContext(subjectContext);
            crmsEventPublisherDTO.setEventLPDRiskSignalChangesDetails(eventLPDRiskSignalChangesDetails);
            
            ObjectMapper obj = new ObjectMapper();
            String signalMessage = obj.writeValueAsString(crmsEventPublisherDTO);
            log.info("Message Generated: " + signalMessage);
            
            // Send message to trigger queue
            senderClient.sendMessage(new ServiceBusMessage(signalMessage));
            log.info("Message sent successfully to trigger queue.");
        } else {
            log.info("Facility is not of type NPL, skipping message generation.");
        }
    }
}

This will ensure that the message is generated and sent only if the facility is of type NPL. Otherwise, the method will log and skip the process.

