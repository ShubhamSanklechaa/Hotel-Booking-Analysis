The warning you're seeing indicates that the queryForObject(String, Object[], Class<Integer>) method from JdbcTemplate is deprecated. You should update the method to use the recommended alternative, which is queryForObject(String, Object[], RowMapper) or queryForObject(String, SqlParameterSource, Class).

Hereâ€™s how you can modify the method using RowMapper to avoid the deprecation warning:

Updated CreditFacilityTypeDAO.java:

import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.sql.SQLException;

@Repository
public class CreditFacilityTypeDAO {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public boolean isNPLFacility(String facilityId) {
        String query = "SELECT 1 FROM CREDIT_FACILITY WHERE FACILITY_ID = ? AND RISK_MANAGEMENT_TYPE = 'NPL'";
        Integer result = jdbcTemplate.queryForObject(query, new Object[]{facilityId}, new RowMapper<Integer>() {
            @Override
            public Integer mapRow(ResultSet rs, int rowNum) throws SQLException {
                return rs.getInt(1);
            }
        });
        return result != null && result == 1;
    }
}

Key Changes:

I replaced the deprecated method with jdbcTemplate.queryForObject(query, Object[], RowMapper<Integer>).

The RowMapper implementation is used to map the result set, returning the required integer value.


This way, you avoid the deprecation warning while achieving the same functionality.

