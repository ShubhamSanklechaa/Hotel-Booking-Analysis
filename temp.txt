package com.abnamro.crms.lpdrisksignaladministration.utility;

import com.abnamro.commons.dto.EventDTO;
import com.abnamro.crms.lpdrisksignaladministration.config.ServiceBusConfig;
import com.azure.messaging.servicebus.ServiceBusException;
import com.azure.messaging.servicebus.ServiceBusMessage;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class LPDTriggerMessageSenderUtilTest {

    @Mock
    private ServiceBusConfig serviceBusConfig;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private LPDTriggerMessageSenderUtil lpdTriggerMessageSenderUtil;

    @Value("${event.writer.queue}")
    private String queueNameRSD;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(lpdTriggerMessageSenderUtil, "queueNameRSD", "test-queue");
    }

    @Test
    void testConvertAndSendToRsdQueue_Success() throws JsonProcessingException, ServiceBusException {
        EventDTO eventDTO = new EventDTO();
        String message = "test-message";

        when(objectMapper.writeValueAsString(eventDTO)).thenReturn(message);
        doNothing().when(serviceBusConfig.getInstance().getSenderClient()).sendMessage(any(ServiceBusMessage.class));

        assertDoesNotThrow(() -> lpdTriggerMessageSenderUtil.convertAndSendToRsdQueue(eventDTO));

        verify(objectMapper, times(1)).writeValueAsString(eventDTO);
        verify(serviceBusConfig.getInstance().getSenderClient(), times(1)).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    void testConvertAndSendToRsdQueue_JsonProcessingException() throws JsonProcessingException {
        EventDTO eventDTO = new EventDTO();

        when(objectMapper.writeValueAsString(eventDTO)).thenThrow(JsonProcessingException.class);

        assertDoesNotThrow(() -> lpdTriggerMessageSenderUtil.convertAndSendToRsdQueue(eventDTO));

        verify(objectMapper, times(1)).writeValueAsString(eventDTO);
        verify(serviceBusConfig.getInstance().getSenderClient(), never()).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    void testConvertAndSendToRsdQueue_ServiceBusException() throws JsonProcessingException, ServiceBusException {
        EventDTO eventDTO = new EventDTO();
        String message = "test-message";

        when(objectMapper.writeValueAsString(eventDTO)).thenReturn(message);
        doThrow(ServiceBusException.class).when(serviceBusConfig.getInstance().getSenderClient()).sendMessage(any(ServiceBusMessage.class));

        assertDoesNotThrow(() -> lpdTriggerMessageSenderUtil.convertAndSendToRsdQueue(eventDTO));

        verify(objectMapper, times(1)).writeValueAsString(eventDTO);
        verify(serviceBusConfig.getInstance().getSenderClient(), times(1)).sendMessage(any(ServiceBusMessage.class));
    }
}
