To achieve 100% code coverage for your LPDMessageForSignalUtil class, let's write a JUnit 5 test class using Mockito to mock dependencies. This will cover different scenarios for the generateJsonForSignalMessage method.

Here’s how your test class might look:

package com.abnamro.crms.lpdrisksignaladministration.utility;

import com.abnamro.crms.lpdrisksignaladministration.dto.CRMSEventPublisherDTO;
import com.abnamro.crms.lpdrisksignaladministration.model.LPDRiskSignal;
import com.abnamro.crms.lpdrisksignaladministration.constants.LPDRiskSignalConstants;
import com.abnamro.crms.lpdrisksignaladministration.dao.CreditFacilityRMTypeDao;
import com.azure.messaging.servicebus.ServiceBusSenderClient;
import com.azure.messaging.servicebus.ServiceBusMessage;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class LPDMessageForSignalUtilTest {

    @Mock
    private CreditFacilityRMTypeDao creditFacilityRMTypeDao;

    @Mock
    private ServiceBusSenderClient senderClient;

    @InjectMocks
    private LPDMessageForSignalUtil lpdMessageForSignalUtil;

    private LPDRiskSignal newRiskSignal;
    private LPDRiskSignal oldRiskSignal;

    @BeforeEach
    public void setUp() {
        newRiskSignal = new LPDRiskSignal();
        newRiskSignal.setDetrorationFlag("Y");
        newRiskSignal.setSubjectId("123");
        newRiskSignal.setSignalIdentifier(123L);
        newRiskSignal.setOriginalLifetimePD(0.5);
        newRiskSignal.setResidualLifetimePD(0.3);
        newRiskSignal.setAdministrationStatus("Active");
        newRiskSignal.setLpdVersion(1);

        oldRiskSignal = new LPDRiskSignal();
        oldRiskSignal.setDetrorationFlag("N");
    }

    @Test
    public void testGenerateJsonForSignalMessageWithTrigger() throws Exception {
        when(creditFacilityRMTypeDao.existsByFacilityIdAndRiskManagementType(anyString(), anyString())).thenReturn(true);

        lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal);

        verify(senderClient, times(1)).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    public void testGenerateJsonForSignalMessageNoTriggerFacilityNotNPL() throws Exception {
        when(creditFacilityRMTypeDao.existsByFacilityIdAndRiskManagementType(anyString(), anyString())).thenReturn(false);

        lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal);

        verify(senderClient, never()).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    public void testGenerateJsonForSignalMessageNoTriggerNoFlagChange() throws Exception {
        oldRiskSignal.setDetrorationFlag("Y");  // Same as newRiskSignal

        lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal);

        verify(senderClient, never()).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    public void testGenerateJsonForSignalMessageWithJsonProcessingException() throws Exception {
        ObjectMapper objectMapperMock = mock(ObjectMapper.class);
        LPDMessageForSignalUtil utilWithMockedObjectMapper = new LPDMessageForSignalUtil(senderClient, creditFacilityRMTypeDao, objectMapperMock);

        when(objectMapperMock.writeValueAsString(any(CRMSEventPublisherDTO.class)))
            .thenThrow(new JsonProcessingException("Json processing exception") {});

        Exception exception = assertThrows(JsonProcessingException.class, () -> {
            utilWithMockedObjectMapper.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal);
        });

        verify(senderClient, never()).sendMessage(any(ServiceBusMessage.class));
    }
}

Explanation:

1. Dependencies: We mock CreditFacilityRMTypeDao and ServiceBusSenderClient dependencies.


2. Test Cases:

testGenerateJsonForSignalMessageWithTrigger: Tests the case where a 31 trigger is generated and sent to the queue.

testGenerateJsonForSignalMessageNoTriggerFacilityNotNPL: Tests when the facility type is not NPL, so no trigger should be generated.

testGenerateJsonForSignalMessageNoTriggerNoFlagChange: Tests when there’s no change in the deterioration flag.

testGenerateJsonForSignalMessageWithJsonProcessingException




