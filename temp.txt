To ensure 100% code coverage, we need to test each branch and handle any complex dependencies. In your case, ensuring the ServiceBusSenderClient mock behaves as expected and verifying all key branches (such as if statements) should provide full coverage.

Here’s an improved version of the test code that covers each branch, including the condition where the facility is of type NPL and the scenario where it isn’t. Additionally, it checks message generation and sending.

Revised Test Class

package com.abnamro.crms.lpdrisksignaladministration.utility;

import com.abnamro.crms.lpdrisksignaladministration.constants.LPDRiskSignalConstants;
import com.abnamro.crms.lpdrisksignaladministration.dao.CreditFacilityRMTypeDao;
import com.abnamro.crms.lpdrisksignaladministration.dto.CRMSEventPublisherDTO;
import com.abnamro.crms.lpdrisksignaladministration.dto.LPDRiskSignalTriggerDetails;
import com.abnamro.crms.lpdrisksignaladministration.dto.SubjectContext;
import com.abnamro.crms.lpdrisksignaladministration.exception.LPDException;
import com.abnamro.crms.lpdrisksignaladministration.model.LPDRiskSignal;
import com.azure.messaging.servicebus.ServiceBusMessage;
import com.azure.messaging.servicebus.ServiceBusSenderClient;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class LPDMessageForSignalUtilTest {

    @Mock
    private LPDTriggerMessageSenderUtil lpdTriggerMessageSenderUtil;

    @Mock
    private ServiceBusSenderClient senderClient;

    @Mock
    private CreditFacilityRMTypeDao creditFacilityRMTypeDao;

    @InjectMocks
    private LPDMessageForSignalUtil lpdMessageForSignalUtil;

    private LPDRiskSignal oldRiskSignal;
    private LPDRiskSignal newRiskSignal;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // Mock LPDRiskSignal instances
        oldRiskSignal = new LPDRiskSignal();
        oldRiskSignal.setDetrorationFlag("N");

        newRiskSignal = new LPDRiskSignal();
        newRiskSignal.setDetrorationFlag("Y");
        newRiskSignal.setSubjectId("subject-123");
        newRiskSignal.setSignalIdentifier(1);
        newRiskSignal.setOriginalLifetimePD(BigDecimal.valueOf(0.5));
        newRiskSignal.setResidualLifetimePD(BigDecimal.valueOf(0.3));
        newRiskSignal.setAdministrationStatus("Active");
        newRiskSignal.setLpdVersion(1); // Use Integer as required
    }

    @Test
    void testGenerateJsonForSignalMessage_WithNPL() throws JsonProcessingException, LPDException, InterruptedException {
        // Set up mocks for NPL condition
        when(creditFacilityRMTypeDao.existsByFacilityIdAndRiskManagementType(newRiskSignal.getSubjectId(), LPDRiskSignalConstants.NPL))
            .thenReturn(true);
        doNothing().when(senderClient).sendMessage(any(ServiceBusMessage.class));

        // Call the method and assert that no exceptions are thrown
        assertDoesNotThrow(() -> lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal));

        // Verify that the necessary methods were called
        verify(creditFacilityRMTypeDao, times(1))
            .existsByFacilityIdAndRiskManagementType(newRiskSignal.getSubjectId(), LPDRiskSignalConstants.NPL);
        verify(senderClient, times(1)).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    void testGenerateJsonForSignalMessage_NonNPL() throws JsonProcessingException, LPDException, InterruptedException {
        // Mock to return false for NPL check
        when(creditFacilityRMTypeDao.existsByFacilityIdAndRiskManagementType(any(), eq(LPDRiskSignalConstants.NPL)))
            .thenReturn(false);

        // Call the method and assert that no exceptions are thrown
        assertDoesNotThrow(() -> lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal));

        // Verify that no message was sent
        verify(senderClient, never()).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    void testGenerateJsonForSignalMessage_DeteriorationFlagUnchanged() throws JsonProcessingException, LPDException, InterruptedException {
        // Mock unchanged deterioration flag
        oldRiskSignal.setDetrorationFlag("Y");
        newRiskSignal.setDetrorationFlag("Y");

        // Call the method and assert that no exceptions are thrown
        assertDoesNotThrow(() -> lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal));

        // Verify no message is sent if the flag hasn’t changed
        verify(senderClient, never()).sendMessage(any(ServiceBusMessage.class));
    }

    @Test
    void testGenerateJsonForSignalMessage_ExceptionHandling() throws JsonProcessingException, InterruptedException {
        // Simulate an exception during message sending
        when(creditFacilityRMTypeDao.existsByFacilityIdAndRiskManagementType(any(), eq(LPDRiskSignalConstants.NPL)))
            .thenReturn(true);
        doThrow(new RuntimeException("ServiceBus error")).when(senderClient).sendMessage(any(ServiceBusMessage.class));

        // Call the method and ensure the exception is handled gracefully
        assertDoesNotThrow(() -> lpdMessageForSignalUtil.generateJsonForSignalMessage(newRiskSignal, oldRiskSignal));

        // Verify the NPL check and the attempt to send the message
        verify(creditFacilityRMTypeDao, times(1))
            .existsByFacilityIdAndRiskManagementType(newRiskSignal.getSubjectId(), LPDRiskSignalConstants.NPL);
        verify(senderClient, times(1)).sendMessage(any(ServiceBusMessage.class));
    }
}

Explanation of Additional Tests:

1. testGenerateJsonForSignalMessage_WithNPL: Verifies the message is sent for NPL facilities with a changed deterioration flag.


2. testGenerateJsonForSignalMessage_NonNPL: Ensures no message is sent for non-NPL facilities.


3. testGenerateJsonForSignalMessage_DeteriorationFlagUnchanged: Verifies no message is sent if the deterioration flag remains unchanged.


4. testGenerateJsonForSignalMessage_ExceptionHandling: Simulates an exception during message sending to ensure it’s handled gracefully, improving robustness.



With these additional tests, you should achieve 100% code coverage and cover all critical paths in LPDMessageForSignalUtil. Let me know if you face any other issues.

