To ensure that all test cases pass with 100% coverage, we need to refine the test cases, especially focusing on mocking behaviors in the try-catch blocks. I'll update the code to mock both JsonProcessingException and ServiceBusException scenarios accurately, ensuring the catch blocks are executed correctly.

Here's the updated test class:

package com.abnamro.crms.1pdrisksignaladministration.utility;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.azure.servicebus.IMessageSender;
import com.microsoft.azure.servicebus.ServiceBusException;
import com.microsoft.azure.servicebus.ServiceBusMessage;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class LPDTriggerMessageSenderUtilTest {

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private ServiceBusConfig serviceBusConfig;

    @Mock
    private Logger log;

    @Mock
    private IMessageSender messageSender;

    @InjectMocks
    private LPDTriggerMessageSenderUtil messageSenderUtil;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(messageSenderUtil, "queueNameRSD", "testQueue");
        when(serviceBusConfig.getInstance().getSenderClient()).thenReturn(messageSender);
    }

    @Test
    public void testConvertAndSendToRsdQueue_Success() throws JsonProcessingException, ServiceBusException {
        // Arrange
        EventDTO eventDTO = new EventDTO();
        String message = "testMessage";

        when(objectMapper.writeValueAsString(eventDTO)).thenReturn(message);

        // Act & Assert
        assertDoesNotThrow(() -> messageSenderUtil.convertAndSendToRsdQueue(eventDTO));
        verify(log).info("Sending Message to RSD queue...");
        verify(messageSender).sendMessage(any(ServiceBusMessage.class));
        verify(log).info("Message sent successfully to RSD Queue...");
    }

    @Test
    public void testConvertAndSendToRsdQueue_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        EventDTO eventDTO = new EventDTO();

        // Simulate a JsonProcessingException when converting eventDTO to JSON
        when(objectMapper.writeValueAsString(eventDTO)).thenThrow(new JsonProcessingException("JSON processing error") {});

        // Act
        messageSenderUtil.convertAndSendToRsdQueue(eventDTO);

        // Assert
        verify(log).error(eq("Error occurred while sending the message to rsd queue = {}"),
                argThat(stackTrace -> stackTrace.contains("JsonProcessingException")));
    }

    @Test
    public void testConvertAndSendToRsdQueue_ServiceBusException() throws JsonProcessingException, ServiceBusException {
        // Arrange
        EventDTO eventDTO = new EventDTO();
        String message = "testMessage";

        when(objectMapper.writeValueAsString(eventDTO)).thenReturn(message);

        // Simulate a ServiceBusException when sending the message
        doThrow(new ServiceBusException(false, "Service Bus error")).when(messageSender).sendMessage(any(ServiceBusMessage.class));

        // Act
        messageSenderUtil.convertAndSendToRsdQueue(eventDTO);

        // Assert
        verify(log).error(eq("Error occurred while sending the message to rsd queue = {}"),
                argThat(stackTrace -> stackTrace.contains("ServiceBusException")));
    }
}

Explanation of Changes:

1. Mocking IMessageSender:

Created a mock for IMessageSender, which is the type of object returned by serviceBusConfig.getInstance().getSenderClient().



2. Refined ServiceBusException Test:

We mock sendMessage on the messageSender object to throw a ServiceBusException. This ensures that the catch block for ServiceBusException is triggered.



3. Enhanced Exception Assertions:

In the testConvertAndSendToRsdQueue_JsonProcessingException and testConvertAndSendToRsdQueue_ServiceBusException methods, used argThat to verify that the exact exception type (JsonProcessingException or ServiceBusException) appears in the stack trace logged.




This update should ensure that both try-catch blocks are tested thoroughly and that all test cases pass, achieving 100% code coverage.

